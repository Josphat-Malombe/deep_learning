# -*- coding: utf-8 -*-
"""model_001.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OARXXqzXUWhqj5ADxjnWPTOir7FHGqxt
"""

import torch
from torch import nn
import matplotlib.pyplot as plt

device = "cuda" if torch.cuda.is_available() else "cpu"

weight=0.9
bias = 0.3

start=0
end=1
step=0.02

X=torch.arange(start,end,step).unsqueeze(dim=1)
y= weight*X+bias
train_split=int(0.7*len(X))
X_train, y_train = X[:train_split], y[:train_split]
X_test, y_test = X[train_split:], y[train_split:]
len(X_train), len(y_train), len(X_test), len(y_test)

class LinearModel(nn.Module):
  def __init__(self):
    super().__init__()

    self.linear_layer=nn.Linear(in_features=1, out_features=1)

  def forward(self, X:torch.Tensor)->torch.Tensor:
    return self.linear_layer(X)

torch.manual_seed(42)
model_exercise=LinearModel()

criterion=nn.L1Loss()
optimizer=torch.optim.SGD(params=model_exercise.parameters(),lr=0.01)

torch.manual_seed
epochs = 100
for epoch in range(epochs):
  model_exercise.train()
  y_pred=model_exercise(X_train)
  loss=criterion(y_pred ,y_train)
  optimizer.zero_grad()
  loss.backward()
  optimizer.step()

  model_exercise.eval()
  with torch.inference_mode():
    test_pred=model_exercise(X_test)
    test_loss=criterion(test_pred,y_test)

  if epoch %10 == 0:
    print(f"Epoch: {epoch} Training Loss: {loss} Testing Loss: {test_loss}")

model_exercise.state_dict()

def plot_predictions(train_data=X_train, train_labels=y_train, test_data=X_test, test_labels=y_test, predictions=None):
    plt.figure(figsize=(10, 7))
    plt.scatter(train_data, train_labels, c="b", s=4, label="Training Data")
    plt.scatter(test_data, test_labels, c="g", s=4, label="Testing Data")

    if predictions is not None:

        model_exercise.eval()
        with torch.inference_mode():
            predictions = model_exercise(test_data)

        predictions_np = predictions.detach().cpu().numpy()

        plt.scatter(test_data, predictions_np, c="r", s=4, label="Predictions")

    plt.legend()
    plt.show()



plot_predictions()

plot_predictions(predictions=y_pred)